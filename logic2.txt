#include "vars.txt"

LOGIC__HEADER

#define oBANNERS o1
#define oCASTLE_DOORS o2
#define oGATOR1 o11
#define oGATOR2 o12

if (fROOM_SCRIPT_EXECUTED) {
  load.pic(vROOM_NO);
  draw.pic(vROOM_NO);
  discard.pic(vROOM_NO);
  load.logics(LOGIC_SWIMMING);
  set.horizon(50);
  load.sound(SND_CASTLE_DOOR_FANFARE);
  if (fGOAT_COMPANION) {
    load.logics(LOGIC103_GOAT);
    load.view(9);
    add.to.pic(9, 0, 0, 105, 120, 0, 0);
  }
  if (vROOM_YOU_KILLED_THE_GOAT_IN == vROOM_NO) {
    add.to.pic(62, 0, 0, 36, 86, 0, 0);
  }
  if (!fGOAT_COMPANION) {
    load.view(9);
    animate.obj(oCASTLE_DOORS);
    set.view(oCASTLE_DOORS, 9);
    position(oCASTLE_DOORS, 105, 120);
    if (vPREV_ROOM_NO == ROOM55_CASTLE_HALL) {
      set.cel(oCASTLE_DOORS, 2);
    }
    else {
      set.cel(oCASTLE_DOORS, 0);
    }
    draw(oCASTLE_DOORS);
    stop.update(oCASTLE_DOORS);
  }
  load.view(107);
  load.view(97);
  animate.obj(oGATOR1);
  animate.obj(oGATOR2);
  animate.obj(oBANNERS);
  set.view(oGATOR1, 107);
  set.view(oGATOR2, 107);
  set.view(oBANNERS, 97);
  position(oGATOR1, 121, 161);
  position(oGATOR2, 73, 166);
  ignore.horizon(oBANNERS);
  position(oBANNERS, 115, 17);
  set.priority(oBANNERS, 15);
  set(fSWIMMING_IMPOSSIBLE_HERE);
  object.on.water(oGATOR1);
  object.on.water(oGATOR2);
  ignore.blocks(oEGO);
  draw(oGATOR1);
  draw(oGATOR2);
  draw(oBANNERS);
  if (vPREV_ROOM_NO == ROOM55_CASTLE_HALL) {
    position(oEGO, 110, 122);
    set(f26);
  }
  if (vPREV_ROOM_NO == ROOM3_ROCK_OVER_HOLE) {
    get.posn(oEGO, vTEMP_X, vTEMP_Y);
    if (vTEMP_Y > 150) {
      position(oEGO, 2, 150);
    }
  }
  draw(oEGO);
  call(LOGIC_SWIMMING);
  wander(oGATOR1);
  wander(oGATOR2);
  show.pic();
}
if (f26) {
  reset(f26);
  start.update(oCASTLE_DOORS);
  reverse.loop(oCASTLE_DOORS, f25);
}
if (f25 && !f27) {
  stop.update(oCASTLE_DOORS);
}
if (said("pet", "alligators")) {
  print("What!  Are you crazy?");
}
if (said("examine", "bridge")) {
  print("It is a rather small, wooden bridge.");
}
if (said("examine", "flags")) {
  print("High above the castle, the flags are waving in the wind.");
}
if (said("examine", "building")) {
  print("King Edward the Benevolent, the mighty ruler of Daventry, lives in this castle.");
}
if (said("examine", "moat")) {
  print("You never know what might be in there!");
}
if (said("examine", "water")) {
  print("It's your typical moat water: murky and smelly.");
}
if (said("examine", "flowers")) {
  print("They are absolutely gorgeous!");
}
if (said("get", "flowers") || said("steal", "flowers")) {
  print("King Edward does not allow anyone to take his flowers.");
}
if (said("examine", "alligators")) {
  print("These alligators have protected the castle from many a trespasser.");
}
if (said("go", "building")) {
  if (f25) {
    print("You must enter the castle through the door, and the  door is closed.");
  }
}
if (said("close", "doors")) {
  print("The door is already closed.");
}
if (said("examine", "doors")) {
  if (posn(oEGO, 0, 120, 159, 167)) {
    print("These doors are strongly built to keep out unwanted visitors.");
  }
  else {
    print("You can't see them from here.");
  }
}
if (said("anyword", "lions")) {
  if (posn(oEGO, 0, 128, 159, 167)) {
    print("They pose as immovable guards for King Edward's castle, and have frightened off numerous intruders.");
  }
  else {
    print("You can't see them from here.");
  }
}
if (fGOAT_COMPANION) {
  if (said("open", "doors")) {
    if (posn(oEGO, 105, 120, 121, 128)) {
      print("Since the goat is with you, permission to enter the  castle is denied.");
    }
    else {
      print("You cannot reach the door from here.");
    }
    goto(FINALCHECKS);
  }
}
if (f125) {
  if (said("open", "doors")) {
    if (posn(oEGO, 105, 120, 121, 128)) {
      if (vTREASURE_COUNT == 3) {
        print("You have been to the castle once since your quest and  are not allowed to return again.");
      }
      else {
        print("You have been to the castle once and you may not return until your quest is complete.");
      }
    }
    else {
      print("You cannot reach the door from here.");
    }
    goto(FINALCHECKS);
  }
}
if (said("knock", "doors")) {
  if (posn(oEGO, 105, 120, 121, 128)) {
    print("Your knock echos within the castle.  Unfortunately, no one answers.");
  }
  else {
    print("You cannot reach the door from here.");
  }
}
if (!fGOAT_COMPANION && !f125) {
  if (said("open", "doors")) {
    if (posn(oEGO, 105, 120, 121, 128)) {
      set(f27);
      start.update(oCASTLE_DOORS);
      sound(SND_CASTLE_DOOR_FANFARE, f28);
      end.of.loop(oCASTLE_DOORS, f24);
      set.priority(oEGO, 15);
      print("The huge doors swing open slowly.");
      if (!f193) {
        set(f193);
        vSCORE += 1;
        goto(FINALCHECKS);
      }
      if (!fPOINTS_FOR_ENTERING_CASTLE_AGAIN) {
        set(fPOINTS_FOR_ENTERING_CASTLE_AGAIN);
        vSCORE += 1;
      }
    }
    else {
      print("You cannot reach the door from here.");
    }
  }
}
if (f24 && f28) {
  new.room(ROOM55_CASTLE_HALL);
}
if (said("drink", "water") && !fBUCKET_FILLED && !f116) {
  if (posn(oEGO, 0, 143, 159, 167) || posn(oEGO, 40, 108, 74, 142)) {
    print("As you kneel by the edge of the moat and see just how filthy the water is, your thirst strangely leaves you.");
  }
  else {
    print("You are not close enough to any water.");
  }
}
if (fCARRYING_BUCKET && !fBUCKET_FILLED) {
  if (said("get", "water")) {
    if (posn(oEGO, 0, 143, 159, 167) || posn(oEGO, 40, 108, 74, 142)) {
      reset(f116);
      print("Although you notice the water is unclean, you fill the bucket.");
      get("water");
      set(fBUCKET_FILLED);
      if (!fFILL_BUCKET_POINTS) {
        set(fFILL_BUCKET_POINTS);
        vSCORE += 2;
      }
    }
    else {
      print("You are not close enough to any water.");
    }
  }
}
if (fEGO_TOUCHED_TRIGGER_LINE) {
  set(fEGO_ON_WATER);
}
if (vAQUATIC_ACTIVITY == AQUATICACTIVITY_NONE && fEGO_ON_WATER) {
  vEGO_WATER_X = 255;
  ignore.objs(oEGO);
  if (posn(oEGO, 9, 145, 44, 167)) {
    vEGO_WATER_X = 27;
    vEGO_WATER_Y = 166;
  }
  if (posn(oEGO, 45, 159, 69, 167)) {
    vEGO_WATER_X = 50;
    vEGO_WATER_Y = 166;
  }
  if (posn(oEGO, 70, 159, 94, 167)) {
    vEGO_WATER_X = 75;
    vEGO_WATER_Y = 166;
  }
  if (posn(oEGO, 95, 159, 122, 167)) {
    vEGO_WATER_X = 103;
    vEGO_WATER_Y = 166;
  }
  if (posn(oEGO, 123, 159, 159, 167)) {
    vEGO_WATER_X = 133;
    vEGO_WATER_Y = 166;
  }
  if (posn(oEGO, 50, 110, 70, 144)) {
    set.priority(oEGO, 5);
    vEGO_WATER_X = 56;
    vEGO_WATER_Y = 130;
  }
  if (vEGO_WATER_X == 255) {
    vEGO_WATER_X = 0;
  }
  else {
    get.posn(oEGO, vTEMP_X, vTEMP_Y);
    vEGO_WATER_X -= vTEMP_X;
    vEGO_WATER_Y -= vTEMP_Y;
    set(fMANUAL_EGO_WATER_POS);
  }
}
if (fEGO_ON_WATER) {
  if (said("get out", "moat") || said("exit", "moat")) {
    print("The moats slippery sides prevent you from getting out.");
  }
}
if (fEGO_ON_WATER && !f23) {
  program.control();
  stop.motion(oEGO);
  follow.ego(oGATOR1, 18, f20);
  follow.ego(oGATOR2, 18, f21);
  set(f23);
}
if (posn(oEGO, 61, 135, 63, 137) && !f22) {
  print("Misfortune strikes and you have fallen into the moat. Your struggles and cries have attracted hungry alligators.  They do not want to let you go.");
  set(f22);
  v31 = 45;
}
if (f20 && !f22) {
  print("Misfortune strikes and you have fallen into the moat. Your struggles and cries have attracted hungry alligators.  They do not want to let you go.");
  set(f22);
  v31 = 45;
}
if (f21 && !f22) {
  print("Misfortune strikes and you have fallen into the moat. Your struggles and cries have attracted hungry alligators.  They do not want to let you go.");
  set(f22);
  v31 = 45;
}
if (f22 && v31 < 1) {
  erase(oEGO);
  if (f20) {
    erase(oGATOR1);
  }
  if (f21) {
    erase(oGATOR2);
  }
  set(fGAME_OVER);
}
v31--;
FINALCHECKS:
  if (vEGO_EDGE_CODE != EDGE_NONE) {
    reset(fSWIMMING_IMPOSSIBLE_HERE);
  }
  if (vEGO_EDGE_CODE == EDGE_HORIZON) {
    new.room(ROOM15_CARROT_PATCH_WEST);
  }
  if (vEGO_EDGE_CODE == EDGE_RIGHT) {
    new.room(ROOM1_CASTLE_EAST);
  }
  if (vEGO_EDGE_CODE == EDGE_LEFT) {
    new.room(ROOM3_ROCK_OVER_HOLE);
  }
  if (fGOAT_COMPANION) {
    call(LOGIC103_GOAT);
  }
  call(LOGIC_SWIMMING);
  return;

LOGIC__FOOTER

